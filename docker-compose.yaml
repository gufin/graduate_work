version: '3.9'
services:
  nginx:
    image: nginx:latest
    expose:
      - 80
      - 8080
      - 8081
      - 8082
    ports:
      - 80:80
      - 8080:8080
      - 8081:8081
      - 8082:8082
    depends_on:
      - admin
    volumes:
      - logs:/srv/logs
      - static:/srv/static
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  api:
    restart: always
    env_file:
      - .env
    environment:
      PROJECT_NAME: ${API_APP_PROJECT_NAME}
      APP_HOST: ${API_APP_HOST}
      APP_PORT: ${API_APP_PORT}
      APP_SERVICE_URL: ${API_APP_SERVICE_URL}
      AUTH_SERVICE_URL: ${AUTH_APP_SERVICE_URL}
      PROFILE_SERVICE_URL: ${PROFILE_APP_SERVICE_URL}
      AMPQ_URL: ${MQ_BROKER_URL}
      MIN_PAGE_SIZE: ${API_APP_MIN_PAGE_SIZE}
      MAX_PAGE_SIZE: ${API_APP_MAX_PAGE_SIZE}
      MAX_PAGE_NUMBER: ${API_APP_MAX_PAGE_NUMBER}
      MAX_SEARCH_LENGTH: ${API_APP_MAX_SEARCH_LENGTH}
    depends_on:
      - storage
      - elasticsearch
    image: 345789231/api-service:latest
    command: sh -c "dockerize --wait-retry-interval 5s --timeout 100s -wait http://${MQ_BROKER_HOST}:${MQ_BROKER_PORT} &&
      gunicorn -k uvicorn.workers.UvicornWorker main:app --bind=${API_APP_HOST}:${API_APP_PORT}"

  auth:
    restart: always
    env_file:
      - .env
    environment:
      APP_NAME: ${AUTH_APP_NAME}
      APP_HOST: ${AUTH_APP_HOST}
      APP_PORT: ${AUTH_APP_PORT}
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_USER: ${AUTH_DB_USER}
      DB_HOST: ${AUTH_DB_HOST}
      DB_PORT: ${AUTH_DB_PORT}
      POSTGRES_URL: ${AUTH_DB_URL}
      SCHEMA_NAME: ${AUTH_SCHEMA_NAME}
      APP_SERVICE_URL: ${AUTH_APP_SERVICE_URL}
      AMPQ_URL: ${MQ_BROKER_URL}
    depends_on:
      - storage
    image: 345789231/auth-service:latest
    ports:
      - ${AUTH_APP_PORT}:${AUTH_APP_PORT}
    command: sh -c "dockerize --wait-retry-interval 5s --timeout 100s -wait http://${MQ_BROKER_HOST}:${MQ_BROKER_PORT} &&
      alembic upgrade head && python cli.py serve --host=${AUTH_APP_HOST} --port=${AUTH_APP_PORT}"

  auth-db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}
      POSTGRES_USER: ${AUTH_DB_USER}
      DB_HOST: ${AUTH_DB_HOST}
      DB_PORT: ${AUTH_DB_PORT}
      POSTGRES_URL: ${AUTH_DB_URL}
      SCHEMA_NAME: ${AUTH_SCHEMA_NAME}
    volumes:
      - ./db-schemas/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - auth-data:/var/lib/postgresql/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    restart: always
    env_file:
      - .env

  broker:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    env_file:
      - .env
    logging:
     driver: none
    ports:
      - ${KAFKA_BROKER_PORT}:${KAFKA_BROKER_PORT}

  on_favorite_movies_change_consumer:
    image: profile-service:latest
    restart: always
    build:
      context: .
    env_file:
      - .env
    environment:
      DB_HOST: ${PROFILE_DB_HOST}
      DB_PORT: ${PROFILE_DB_PORT}
    depends_on:
      - broker
    command: sh -c "dockerize python cli.py on-favorite-movies-change-consumer"

  on_profile_change_consumer:
    image: 345789231/etl-service
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${ADMIN_DB_NAME}
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
      POSTGRES_USER: ${ADMIN_DB_USER}
      DB_HOST: ${ADMIN_DB_HOST}
      DB_PORT: ${ADMIN_DB_PORT}
    depends_on:
      - broker
    command: sh -c "python cli.py on-profile-change-consumer"

  profile:
    image: profile-service:latest
    restart: always
    build:
      context: .
    env_file:
      - .env
    environment:
      DB_HOST: ${PROFILE_DB_HOST}
      DB_PORT: ${PROFILE_DB_PORT}
    depends_on:
      - profile-db
    command: sh -c "alembic upgrade head && gunicorn -k uvicorn.workers.UvicornWorker main:app --bind=${PROFILE_APP_HOST}:${PROFILE_APP_PORT}"

  profile-db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: ${PROFILE_DB_NAME}
      POSTGRES_PASSWORD: ${PROFILE_DB_PASSWORD}
      POSTGRES_USER: ${PROFILE_DB_USER}
      DB_HOST: ${PROFILE_DB_HOST}
      DB_PORT: ${PROFILE_DB_PORT}
      POSTGRES_URL: ${PROFILE_DB_URL}
    volumes:
      - ./db-schemas/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - profile-data:/var/lib/postgresql/data

  admin:
    image: 345789231/admin-panel-service
    restart: always
    environment:
      SECRET_KEY: ${ADMIN_APP_SECRET_KEY}
      AMPQ_URL: ${MQ_BROKER_URL}
      POSTGRES_DB: ${ADMIN_DB_NAME}
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
      POSTGRES_USER: ${ADMIN_DB_USER}
      DB_HOST: ${ADMIN_DB_HOST}
      DB_PORT: ${ADMIN_DB_PORT}
    volumes:
      - static:/app/static
    depends_on:
      - admin-db
    command: sh -c "dockerize --wait-retry-interval 5s --timeout 100s -wait http://${MQ_BROKER_HOST}:${MQ_BROKER_PORT} &&
      uwsgi --strict --ini uwsgi.ini"

  admin-db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_DB: ${ADMIN_DB_NAME}
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
      POSTGRES_USER: ${ADMIN_DB_USER}
    volumes:
      - ./db-schemas/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - admin-data:/var/lib/postgresql/data

  ugc:
    restart: always
    env_file:
      - .env
    environment:
      AUTH_SERVICE_URL: ${AUTH_APP_SERVICE_URL}
      PROJECT_NAME: ${UGC_APP_PROJECT_NAME}
      AMPQ_URL: ${MQ_BROKER_URL}
    ports:
      - ${UGC_APP_PORT}:${UGC_APP_PORT}
    image: 345789231/ugc-service
    command: sh -c "dockerize --wait-retry-interval 5s --timeout 100s -wait http://${MQ_BROKER_HOST}:${MQ_BROKER_PORT} &&
      gunicorn -k uvicorn.workers.UvicornWorker main:app --bind=${UGC_APP_HOST}:${UGC_APP_PORT}"

  mq-broker:
    image: rabbitmq:3-management-alpine
    restart: always
    ports:
      - ${MQ_BROKER_PORT}:${MQ_BROKER_PORT}
      - ${MQ_BROKER_UI_PORT}:${MQ_BROKER_UI_PORT}
    volumes:
      - mq-broker-data:/var/lib/rabbitmq
      - mq-broker-logs:/var/log/rabbitmq

  elasticsearch:
    image: elasticsearch:7.17.6
    restart: always
    environment:
      - discovery.type=${ES_DISCOVERY_TYPE}
      - xpack.security.enabled=${XPACK_SECURITY_ENABLED}
    volumes:
        - elasticsearch-data:/var/lib/elasticsearch/data
    ports:
      - ${ES_PORT}:${ES_PORT}

  worker:
    image: profile-service:latest
    restart: always
    build:
      context: .
    env_file:
      - .env
    environment:
      DB_HOST: ${PROFILE_DB_HOST}
      DB_PORT: ${PROFILE_DB_PORT}
    command: celery -A tasks worker -l info
    depends_on:
      - storage

  etl-worker:
    image: 345789231/etl-service
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${ADMIN_DB_NAME}
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
      POSTGRES_USER: ${ADMIN_DB_USER}
      DB_HOST: ${ADMIN_DB_HOST}
      DB_PORT: ${ADMIN_DB_PORT}
    command: celery -A tasks worker -l info
    depends_on:
      - storage

  etl-scheduler:
    image: 345789231/etl-service
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${ADMIN_DB_NAME}
      POSTGRES_PASSWORD: ${ADMIN_DB_PASSWORD}
      POSTGRES_USER: ${ADMIN_DB_USER}
      DB_HOST: ${ADMIN_DB_HOST}
      DB_PORT: ${ADMIN_DB_PORT}
    command: celery -A tasks beat -l info
    depends_on:
      - storage

  storage:
    image: redis:latest
    env_file:
      - .env
    ports:
      - ${STORAGE_PORT}:${STORAGE_PORT}
    volumes:
      - storage-data:/var/lib/storage-data/data

  tracer:
    image: jaegertracing/all-in-one:latest
    ports:
      - ${JAEGER_PORT}:${JAEGER_PORT}/udp
      - ${JAEGER_UI_PORT}:${JAEGER_UI_PORT}

  mongo:
    image: mongo
    ports:
      - ${MONGO_PORT}:${MONGO_PORT}
    volumes:
      - /etc/localtime:/etc/localtime:ro

volumes:
  auth-data:
  admin-data:
  profile-data:
  mq-broker-data:
  mq-broker-logs:
  static:
  logs:
  storage-data:
    driver: local
  elasticsearch-data:
    driver: local